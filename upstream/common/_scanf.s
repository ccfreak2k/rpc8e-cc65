;
; File generated by cc65 v 2.13.9
;
	.fopt		compiler,"cc65 v 2.13.9"
	.setcpu		"65816"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "_scanf.c", 26716, 1344797820
	.dbg		file, "/Users/steven/bin/lib/cc65/include/stddef.h", 2972, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/stdarg.h", 2817, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/stdbool.h", 2042, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/stdio.h", 5951, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/string.h", 4883, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/setjmp.h", 2739, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/limits.h", 2978, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/errno.h", 4695, 1344797532
	.dbg		file, "/Users/steven/bin/lib/cc65/include/ctype.h", 7921, 1344797532
	.dbg		file, "_scanf.h", 963, 1108372799
	.dbg		sym, "memset", "00", extern, "_memset"
	.dbg		sym, "_setjmp", "00", extern, "__setjmp"
	.dbg		sym, "longjmp", "00", extern, "_longjmp"
	.dbg		sym, "_seterrno", "00", extern, "__seterrno"
	.dbg		sym, "_ctype", "00", extern, "__ctype"
	.dbg		sym, "isspace", "00", extern, "_isspace"
	.dbg		sym, "isxdigit", "00", extern, "_isxdigit"
	.dbg		sym, "tolower", "00", extern, "_tolower"
	.import		_memset
	.import		__setjmp
	.import		_longjmp
	.import		__seterrno
	.import		__ctype
	.import		_isspace
	.import		_isxdigit
	.import		_tolower
	.export		__scanf

.segment	"RODATA"

_Bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80

.segment	"BSS"

_format:
	.res	2,$00
_D_:
	.res	2,$00
_ap:
	.res	2,$00
_JumpBuf:
	.res	5,$00
_F:
	.res	1,$00
_CharCount:
	.res	2,$00
_C:
	.res	2,$00
_Width:
	.res	2,$00
_IntVal:
	.res	4,$00
_Assignments:
	.res	2,$00
_IntBytes:
	.res	1,$00
_Converted:
	.res	1,$00
_Positive:
	.res	1,$00
_NoAssign:
	.res	1,$00
_Invert:
	.res	1,$00
_CharSet:
	.res	32,$00

; ---------------------------------------------------------------
; int __near__ __fastcall__ _scanf (__near__ const struct scanfdata*, __near__ const unsigned char*, __near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__scanf: near

	.dbg	func, "_scanf", "00", extern, "__scanf"
	.dbg	sym, "D", "00", auto, 4
	.dbg	sym, "format_", "00", auto, 2
	.dbg	sym, "ap_", "00", auto, 0
	.dbg	sym, "S", "00", register, "regbank", 4

.segment	"BSS"

L018A:
	.res	1,$00
L018B:
	.res	1,$00
L018C:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 490
	jsr     pushax
;
; register char* S;
;
	.dbg	line, "_scanf.c", 491
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
;
; D_     = D;
;
	.dbg	line, "_scanf.c", 500
	ldy     #$07
	lda     (sp),y
	sta     _D_+1
	dey
	lda     (sp),y
	sta     _D_
;
; format = format_;
;
	.dbg	line, "_scanf.c", 501
	dey
	lda     (sp),y
	sta     _format+1
	dey
	lda     (sp),y
	sta     _format
;
; ap     = ap_;
;
	.dbg	line, "_scanf.c", 502
	dey
	lda     (sp),y
	sta     _ap+1
	dey
	lda     (sp),y
	sta     _ap
;
; Converted   = false;
;
	.dbg	line, "_scanf.c", 505
	stz     _Converted
;
; Assignments = 0;
;
	.dbg	line, "_scanf.c", 506
	stz     _Assignments
	stz     _Assignments+1
;
; CharCount   = 0;
;
	.dbg	line, "_scanf.c", 507
	stz     _CharCount
	stz     _CharCount+1
;
; if ((unsigned char) setjmp (JumpBuf) == RC_OK) {
;
	.dbg	line, "_scanf.c", 512
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
	jsr     __setjmp
	cmp     #$00
	jne     L0199
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 516
L019C:	jsr     _ReadChar
;
; while (GetFormat ()) {
;
	.dbg	line, "_scanf.c", 519
	jmp     L01A0
;
; if (F != '%') {
;
	.dbg	line, "_scanf.c", 522
L019E:	lda     _F
	cmp     #$25
	beq     L01A2
;
; if ((bool) isspace ((int) F)) {
;
	.dbg	line, "_scanf.c", 525
	ldx     #$00
	jsr     _isspace
	tax
	beq     L01A4
;
; SkipWhite ();
;
	.dbg	line, "_scanf.c", 531
	jsr     _SkipWhite
;
; continue;
;
	.dbg	line, "_scanf.c", 532
	jmp     L01A0
;
; if (C != (int) F) {
;
	.dbg	line, "_scanf.c", 539
L01A4:	lda     _C
	ldx     _C+1
	jsr     pushax
	lda     _F
	jsr     tosicmp0
	beq     L019C
;
; goto NoConv;
;
	.dbg	line, "_scanf.c", 544
	jmp     L0199
;
; if (GetFormat () == '%') {
;
	.dbg	line, "_scanf.c", 554
L01A2:	jsr     _GetFormat
	cmp     #$25
;
; goto Percent;
;
	.dbg	line, "_scanf.c", 555
	beq     L01A4
;
; NoAssign = (F == '*');
;
	.dbg	line, "_scanf.c", 559
	lda     _F
	cmp     #$2A
	jsr     booleq
	sta     _NoAssign
;
; if (NoAssign) {
;
	.dbg	line, "_scanf.c", 560
	lda     _NoAssign
	beq     L01B2
;
; GetFormat ();
;
	.dbg	line, "_scanf.c", 561
	jsr     _GetFormat
;
; Width     = UINT_MAX;
;
	.dbg	line, "_scanf.c", 565
L01B2:	lda     #$FF
	sta     _Width
	sta     _Width+1
;
; HaveWidth = (bool) isdigit (F);
;
	.dbg	line, "_scanf.c", 566
	ldy     _F
	lda     __ctype,y
	and     #$04
	sta     L018A
;
; if (HaveWidth) {
;
	.dbg	line, "_scanf.c", 567
	lda     L018A
	beq     L01C9
;
; Width = 0;
;
	.dbg	line, "_scanf.c", 568
	stz     _Width
	stz     _Width+1
;
; Width = Width * 10 + (F & 0x0F);
;
	.dbg	line, "_scanf.c", 571
L01C8:	lda     _Width
	ldx     _Width+1
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	lda     _F
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0337
	inx
L0337:	sta     _Width
	stx     _Width+1
;
; } while ((bool) isdigit (GetFormat ()));
;
	.dbg	line, "_scanf.c", 572
	jsr     _GetFormat
	tay
	lda     __ctype,y
	and     #$04
	tax
	bne     L01C8
;
; if (Width == 0) {
;
	.dbg	line, "_scanf.c", 574
L01C9:	lda     _Width
	ora     _Width+1
	bne     L01DA
;
; _seterrno (EINVAL);
;
	.dbg	line, "_scanf.c", 580
	lda     #$07
	jsr     __seterrno
;
; return Assignments;
;
	.dbg	line, "_scanf.c", 583
	jmp     L033E
;
; Width = ~Width;
;
	.dbg	line, "_scanf.c", 589
L01DA:	lda     _Width
	ldx     _Width+1
	jsr     complax
	sta     _Width
	stx     _Width+1
;
; IntBytes = sizeof(int) - 1;
;
	.dbg	line, "_scanf.c", 592
	lda     #$01
	sta     _IntBytes
;
; switch (F) {
;
	.dbg	line, "_scanf.c", 593
	lda     _F
;
; }
;
	.dbg	line, "_scanf.c", 618
	cmp     #$4C
	beq     L01FE
	cmp     #$68
	beq     L01EB
	cmp     #$6A
	beq     L0326
	cmp     #$6C
	beq     L01F4
	cmp     #$74
	beq     L01FE
	cmp     #$7A
	beq     L01FE
	bra     L0327
;
; if (*format == 'h') {
;
	.dbg	line, "_scanf.c", 595
L01EB:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$68
	bne     L01FE
;
; IntBytes = sizeof(char) - 1;
;
	.dbg	line, "_scanf.c", 596
	stz     _IntBytes
;
; ++format;
;
	.dbg	line, "_scanf.c", 597
	inc     _format
	bne     L01FE
	inc     _format+1
;
; break;
;
	.dbg	line, "_scanf.c", 600
	bra     L01FE
;
; if (*format == 'l') {
;
	.dbg	line, "_scanf.c", 603
L01F4:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$6C
	bne     L0326
;
; ++format;
;
	.dbg	line, "_scanf.c", 605
	inc     _format
	bne     L0326
	inc     _format+1
;
; IntBytes = sizeof(long) - 1;
;
	.dbg	line, "_scanf.c", 609
L0326:	lda     #$03
	sta     _IntBytes
;
; GetFormat ();
;
	.dbg	line, "_scanf.c", 617
L01FE:	jsr     _GetFormat
;
; switch (F) {
;
	.dbg	line, "_scanf.c", 621
L0327:	lda     _F
;
; }
;
	.dbg	line, "_scanf.c", 847
	cmp     #$41
	jeq     L02F6
	cmp     #$43
	jeq     L02F6
	cmp     #$45
	jeq     L02F6
	cmp     #$46
	jeq     L02F6
	cmp     #$47
	jeq     L02F6
	cmp     #$53
	jeq     L02F6
	cmp     #$58
	beq     L0216
	cmp     #$5B
	jeq     L0268
	cmp     #$61
	jeq     L02F6
	cmp     #$63
	jeq     L032A
	cmp     #$64
	beq     L0208
	cmp     #$65
	jeq     L02F6
	cmp     #$66
	jeq     L02F6
	cmp     #$67
	jeq     L02F6
	cmp     #$69
	beq     L020E
	cmp     #$6E
	jeq     L02E6
	cmp     #$6F
	beq     L0212
	cmp     #$70
	jeq     L02CC
	cmp     #$73
	beq     L021C
	cmp     #$75
	beq     L0208
	cmp     #$78
	beq     L0216
	jmp     L030F
;
; ScanInt (10);
;
	.dbg	line, "_scanf.c", 628
L0208:	lda     #$0A
	jsr     _ScanInt
;
; break;
;
	.dbg	line, "_scanf.c", 629
	jmp     L01A0
;
; ScanInt (0);
;
	.dbg	line, "_scanf.c", 633
L020E:	lda     #$00
	jsr     _ScanInt
;
; break;
;
	.dbg	line, "_scanf.c", 634
	jmp     L01A0
;
; ScanInt (8);
;
	.dbg	line, "_scanf.c", 638
L0212:	lda     #$08
	jsr     _ScanInt
;
; break;
;
	.dbg	line, "_scanf.c", 639
	jmp     L01A0
;
; ScanInt (16);
;
	.dbg	line, "_scanf.c", 644
L0216:	lda     #$10
	jsr     _ScanInt
;
; break;
;
	.dbg	line, "_scanf.c", 645
	jmp     L01A0
;
; SkipWhite ();
;
	.dbg	line, "_scanf.c", 649
L021C:	jsr     _SkipWhite
;
; CheckEnd ();    /* Is it an input failure? */
;
	.dbg	line, "_scanf.c", 650
	jsr     _CheckEnd
;
; Converted = true;  /* No, conversion will succeed */
;
	.dbg	line, "_scanf.c", 651
	lda     #$01
	sta     _Converted
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 652
	lda     _NoAssign
	bne     L022D
;
; S = va_arg (ap, char*);
;
	.dbg	line, "_scanf.c", 653
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L022A
	dec     _ap+1
L022A:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
;
; while (C != EOF
;
	.dbg	line, "_scanf.c", 655
	bra     L022D
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 658
L0328:	lda     _NoAssign
	bne     L0234
;
; *S++ = C;
;
	.dbg	line, "_scanf.c", 659
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L0237
	inx
L0237:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 661
L0234:	jsr     _ReadChar
;
; while (C != EOF
;
	.dbg	line, "_scanf.c", 655
L022D:	lda     _C+1
;
; && (bool) isspace (C) == false
;
	.dbg	line, "_scanf.c", 656
	cmp     #$FF
	bne     L0338
;
; while (C != EOF
;
	.dbg	line, "_scanf.c", 655
	lda     _C
;
; && (bool) isspace (C) == false
;
	.dbg	line, "_scanf.c", 656
	cmp     #$FF
	beq     L0329
L0338:	lda     _C
	ldx     _C+1
	jsr     _isspace
;
; && ++Width) {
;
	.dbg	line, "_scanf.c", 657
	cmp     #$00
	bne     L0329
	inc     _Width
	bne     L0232
	inc     _Width+1
L0232:	lda     _Width
	ora     _Width+1
	bne     L0328
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 664
L0329:	lda     _NoAssign
	jne     L01A0
;
; *S = '\0';
;
	.dbg	line, "_scanf.c", 665
	sta     (regbank+4)
;
; ++Assignments;
;
	.dbg	line, "_scanf.c", 666
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
;
; break;
;
	.dbg	line, "_scanf.c", 668
	jmp     L01A0
;
; if (HaveWidth == false) {
;
	.dbg	line, "_scanf.c", 672
L032A:	lda     L018A
	bne     L0242
;
; Width = ~1u;
;
	.dbg	line, "_scanf.c", 674
	ldx     #$FF
	lda     #$FE
	sta     _Width
	stx     _Width+1
;
; CheckEnd ();    /* Is it an input failure? */
;
	.dbg	line, "_scanf.c", 676
L0242:	jsr     _CheckEnd
;
; Converted = true;  /* No, at least 1 char. available */
;
	.dbg	line, "_scanf.c", 677
	lda     #$01
	sta     _Converted
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 678
	lda     _NoAssign
	bne     L0262
;
; S = va_arg (ap, char*);
;
	.dbg	line, "_scanf.c", 679
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0252
	dec     _ap+1
L0252:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
;
; while (++Width) {
;
	.dbg	line, "_scanf.c", 684
	bra     L0255
;
; CheckEnd ();  /* Is it a matching failure? */
;
	.dbg	line, "_scanf.c", 685
L0253:	jsr     _CheckEnd
;
; *S++ = C;
;
	.dbg	line, "_scanf.c", 686
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L025A
	inx
L025A:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 687
	jsr     _ReadChar
;
; while (++Width) {
;
	.dbg	line, "_scanf.c", 684
L0255:	inc     _Width
	bne     L0257
	inc     _Width+1
L0257:	lda     _Width
	ora     _Width+1
	bne     L0253
;
; ++Assignments;
;
	.dbg	line, "_scanf.c", 689
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
;
; } else {
;
	.dbg	line, "_scanf.c", 690
	jmp     L01A0
;
; CheckEnd ();  /* Is it a matching failure? */
;
	.dbg	line, "_scanf.c", 693
L0260:	jsr     _CheckEnd
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 694
	jsr     _ReadChar
;
; while (++Width) {
;
	.dbg	line, "_scanf.c", 692
L0262:	inc     _Width
	bne     L0264
	inc     _Width+1
L0264:	lda     _Width
	ora     _Width+1
	bne     L0260
;
; break;
;
	.dbg	line, "_scanf.c", 697
	jmp     L01A0
;
; memset (CharSet, 0, sizeof (CharSet));
;
	.dbg	line, "_scanf.c", 702
L0268:	ldy     #$1F
	lda     #$00
L026E:	sta     _CharSet,y
	dey
	bpl     L026E
;
; Invert = (GetFormat () == '^');
;
	.dbg	line, "_scanf.c", 704
	jsr     _GetFormat
	cmp     #$5E
	jsr     booleq
	sta     _Invert
;
; if (Invert) {
;
	.dbg	line, "_scanf.c", 705
	lda     _Invert
	beq     L032B
;
; GetFormat ();
;
	.dbg	line, "_scanf.c", 706
	jsr     _GetFormat
;
; if (F == ']') {
;
	.dbg	line, "_scanf.c", 708
L032B:	lda     _F
	cmp     #$5D
	bne     L032C
;
; while (F != '\0' && F != ']') {
;
	.dbg	line, "_scanf.c", 716
	bra     L0280
;
; if (*format == '-') {  /* Look ahead at next char. */
;
	.dbg	line, "_scanf.c", 717
L027A:	lda     _format
	sta     ptr1
	lda     _format+1
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$2D
	bne     L0280
;
; Start = F;
;
	.dbg	line, "_scanf.c", 719
	lda     _F
	sta     L018C
;
; ++format;
;
	.dbg	line, "_scanf.c", 720
	inc     _format
	bne     L0285
	inc     _format+1
;
; switch (GetFormat ()) {
;
	.dbg	line, "_scanf.c", 721
L0285:	jsr     _GetFormat
;
; }
;
	.dbg	line, "_scanf.c", 741
	cmp     #$00
	beq     L028A
	cmp     #$5D
	bne     L0292
;
; AddCharToSet (Start);
;
	.dbg	line, "_scanf.c", 725
L028A:	lda     L018C
	jsr     _AddCharToSet
;
; AddCharToSet ('-');
;
	.dbg	line, "_scanf.c", 726
	lda     #$2D
	jsr     _AddCharToSet
;
; break;
;
	.dbg	line, "_scanf.c", 727
	bra     L032C
;
; AddCharToSet (Start);
;
	.dbg	line, "_scanf.c", 733
L0292:	lda     L018C
	jsr     _AddCharToSet
;
; if (Start == F) {
;
	.dbg	line, "_scanf.c", 734
	lda     _F
	cmp     L018C
;
; break;
;
	.dbg	line, "_scanf.c", 735
	beq     L0325
;
; ++Start;
;
	.dbg	line, "_scanf.c", 737
	inc     L018C
;
; while (1) {
;
	.dbg	line, "_scanf.c", 732
	bra     L0292
;
; AddCharToSet (F);
;
	.dbg	line, "_scanf.c", 744
L0280:	lda     _F
	jsr     _AddCharToSet
;
; GetFormat ();
;
	.dbg	line, "_scanf.c", 746
L0325:	jsr     _GetFormat
;
; while (F != '\0' && F != ']') {
;
	.dbg	line, "_scanf.c", 716
L032C:	lda     _F
	beq     L0330
	cmp     #$5D
	bne     L027A
;
; if (F == '\0') {
;
	.dbg	line, "_scanf.c", 751
L0330:	lda     _F
	bne     L02A0
;
; --format;
;
	.dbg	line, "_scanf.c", 752
	lda     _format
	sec
	sbc     #$01
	sta     _format
	bcs     L02A0
	dec     _format+1
;
; if (Invert) {
;
	.dbg	line, "_scanf.c", 756
L02A0:	lda     _Invert
	beq     L033B
;
; InvertCharSet ();
;
	.dbg	line, "_scanf.c", 757
	jsr     _InvertCharSet
;
; Match = false;
;
	.dbg	line, "_scanf.c", 764
L033B:	stz     L018B
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 765
	lda     _NoAssign
	bne     L02B5
;
; S = va_arg (ap, char*);
;
	.dbg	line, "_scanf.c", 766
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L02B2
	dec     _ap+1
L02B2:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	sta     regbank+4
	stx     regbank+4+1
;
; while (IsCharInSet () && ++Width) {
;
	.dbg	line, "_scanf.c", 768
	bra     L02B5
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 769
L0331:	lda     _NoAssign
	bne     L0332
;
; *S++ = C;
;
	.dbg	line, "_scanf.c", 770
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L02BD
	inx
L02BD:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
;
; Match = Converted = true;
;
	.dbg	line, "_scanf.c", 772
L0332:	lda     #$01
	sta     _Converted
	sta     L018B
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 773
	jsr     _ReadChar
;
; while (IsCharInSet () && ++Width) {
;
	.dbg	line, "_scanf.c", 768
L02B5:	jsr     _IsCharInSet
	tax
	beq     L0335
	inc     _Width
	bne     L02B8
	inc     _Width+1
L02B8:	lda     _Width
	ora     _Width+1
	bne     L0331
;
; if (Match == false) {
;
	.dbg	line, "_scanf.c", 776
L0335:	lda     L018B
;
; goto NoConv;
;
	.dbg	line, "_scanf.c", 777
	jeq     L0199
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 779
	lda     _NoAssign
	jne     L01A0
;
; *S = '\0';
;
	.dbg	line, "_scanf.c", 780
	sta     (regbank+4)
;
; ++Assignments;
;
	.dbg	line, "_scanf.c", 781
	inc     _Assignments
	jne     L01A0
	inc     _Assignments+1
;
; break;
;
	.dbg	line, "_scanf.c", 783
	bra     L01A0
;
; SkipWhite ();
;
	.dbg	line, "_scanf.c", 791
L02CC:	jsr     _SkipWhite
;
; if (CHAR (C) != '0') {
;
	.dbg	line, "_scanf.c", 792
	lda     _C
	cmp     #$30
;
; goto NoConv;
;
	.dbg	line, "_scanf.c", 793
	bne     L0199
;
; Converted = true;
;
	.dbg	line, "_scanf.c", 795
	lda     #$01
	sta     _Converted
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 796
	jsr     _ReadChar
;
; switch (CHAR (C)) {
;
	.dbg	line, "_scanf.c", 797
	lda     _C
;
; }
;
	.dbg	line, "_scanf.c", 803
	cmp     #$58
	beq     L02DB
	cmp     #$78
	bne     L0199
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 804
L02DB:	jsr     _ReadChar
;
; ReadInt (16);
;
	.dbg	line, "_scanf.c", 805
	lda     #$10
	jsr     _ReadInt
;
; AssignInt ();
;
	.dbg	line, "_scanf.c", 806
	jsr     _AssignInt
;
; break;
;
	.dbg	line, "_scanf.c", 807
	bra     L01A0
;
; IntVal = (long) (CharCount - (C == EOF ? 0u : 1u));
;
	.dbg	line, "_scanf.c", 813
L02E6:	lda     _CharCount
	ldx     _CharCount+1
	jsr     pushax
	lda     _C+1
	cmp     #$FF
	bne     L02EC
	lda     _C
	cmp     #$FF
	bne     L02EC
	ina
	bra     L02EE
L02EC:	lda     #$01
L02EE:	jsr     tossuba0
	sta     _IntVal
	stx     _IntVal+1
	stz     _IntVal+2
	stz     _IntVal+3
;
; AssignInt ();
;
	.dbg	line, "_scanf.c", 814
	jsr     _AssignInt
;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 816
	lda     _NoAssign
	bne     L01A0
;
; --Assignments;
;
	.dbg	line, "_scanf.c", 817
	lda     _Assignments
	sec
	sbc     #$01
	sta     _Assignments
	bcs     L01A0
	dec     _Assignments+1
;
; break;
;
	.dbg	line, "_scanf.c", 819
	bra     L01A0
;
; _seterrno (ENOSYS);
;
	.dbg	line, "_scanf.c", 836
L02F6:	lda     #$0D
	jsr     __seterrno
;
; return Assignments;
;
	.dbg	line, "_scanf.c", 839
	bra     L033E
;
; _seterrno (EINVAL);
;
	.dbg	line, "_scanf.c", 843
L030F:	lda     #$07
	jsr     __seterrno
;
; return Assignments;
;
	.dbg	line, "_scanf.c", 846
	bra     L033E
;
; while (GetFormat ()) {
;
	.dbg	line, "_scanf.c", 519
L01A0:	jsr     _GetFormat
	tax
	jne     L019E
;
; } else {
;
	.dbg	line, "_scanf.c", 850
	bra     L0317
;
; if (C == EOF && Converted == false) {
;
	.dbg	line, "_scanf.c", 857
L0199:	lda     _C+1
	cmp     #$FF
	bne     L0317
	lda     _C
	cmp     #$FF
	bne     L0317
	lda     _Converted
	bne     L0317
;
; Assignments = EOF; /* Special case:  error */
;
	.dbg	line, "_scanf.c", 858
L033E:	lda     #$FF
	sta     _Assignments
	sta     _Assignments+1
;
; PushBack ();
;
	.dbg	line, "_scanf.c", 863
L0317:	jsr     _PushBack
;
; return Assignments;
;
	.dbg	line, "_scanf.c", 866
	lda     _Assignments
	ldx     _Assignments+1
;
; }
;
	.dbg	line, "_scanf.c", 867
	pha
	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	pla
	jmp     incsp8
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ FindBit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FindBit: near

	.dbg	func, "FindBit", "00", static, "_FindBit"

.segment	"CODE"

;
; asm ("pha");
;
	.dbg	line, "_scanf.c", 109
	pha
;
; asm ("lsr a");              /* Divide by CHAR_BIT */
;
	.dbg	line, "_scanf.c", 110
	lsr     a
;
; asm ("lsr a");
;
	.dbg	line, "_scanf.c", 111
	lsr     a
;
; asm ("lsr a");
;
	.dbg	line, "_scanf.c", 112
	lsr     a
;
; asm ("tax");                /* Byte's offset */
;
	.dbg	line, "_scanf.c", 113
	tax
;
; asm ("pla");
;
	.dbg	line, "_scanf.c", 114
	pla
;
; asm ("and #%b", CHAR_BIT-1);
;
	.dbg	line, "_scanf.c", 115
	and     #$07
;
; asm ("tay");                /* Bit's offset */
;
	.dbg	line, "_scanf.c", 116
	tay
;
; asm ("lda %v,y", Bits);
;
	.dbg	line, "_scanf.c", 117
	lda     _Bits,y
;
; return (unsigned) __AX__;
;
	.dbg	line, "_scanf.c", 118
	jmp     L0010
;
; }
;
	.dbg	line, "_scanf.c", 119
L0010:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ AddCharToSet (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AddCharToSet: near

	.dbg	func, "AddCharToSet", "00", static, "_AddCharToSet"
	.dbg	sym, "$anon-param-0001", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 126
	jsr     pusha
;
; FindBit();
;
	.dbg	line, "_scanf.c", 127
	jsr     _FindBit
;
; asm ("ora %v,x", CharSet);
;
	.dbg	line, "_scanf.c", 128
	ora     _CharSet,x
;
; asm ("sta %v,x", CharSet);
;
	.dbg	line, "_scanf.c", 129
	sta     _CharSet,x
;
; }
;
	.dbg	line, "_scanf.c", 130
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsCharInSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsCharInSet: near

	.dbg	func, "IsCharInSet", "00", static, "_IsCharInSet"

.segment	"CODE"

;
; asm ("lda #$00");
;
	.dbg	line, "_scanf.c", 140
	lda     #$00
;
; asm ("ldx %v+1", C);
;
	.dbg	line, "_scanf.c", 141
	ldx     _C+1
;
; asm ("bne L1");          /* EOF never is in the set */
;
	.dbg	line, "_scanf.c", 142
	bne     L1
;
; asm ("lda %v", C);
;
	.dbg	line, "_scanf.c", 143
	lda     _C
;
; FindBit();
;
	.dbg	line, "_scanf.c", 144
	jsr     _FindBit
;
; asm ("and %v,x", CharSet);
;
	.dbg	line, "_scanf.c", 145
	and     _CharSet,x
;
; asm ("ldx #$00");
;
	.dbg	line, "_scanf.c", 147
L1:	ldx     #$00
;
; return (unsigned char) __AX__;
;
	.dbg	line, "_scanf.c", 148
	jmp     L002D
;
; }
;
	.dbg	line, "_scanf.c", 149
L002D:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ InvertCharSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InvertCharSet: near

	.dbg	func, "InvertCharSet", "00", static, "_InvertCharSet"

.segment	"CODE"

;
; asm ("ldy #%b", sizeof (CharSet) - 1);
;
	.dbg	line, "_scanf.c", 158
	ldy     #$1F
;
; asm ("lda %v,y", CharSet);
;
	.dbg	line, "_scanf.c", 160
L1:	lda     _CharSet,y
;
; asm ("eor #$FF");
;
	.dbg	line, "_scanf.c", 161
	eor     #$FF
;
; asm ("sta %v,y", CharSet);
;
	.dbg	line, "_scanf.c", 162
	sta     _CharSet,y
;
; asm ("dey");
;
	.dbg	line, "_scanf.c", 163
	dey
;
; asm ("bpl L1");
;
	.dbg	line, "_scanf.c", 164
	bpl     L1
;
; }
;
	.dbg	line, "_scanf.c", 165
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ PushBack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PushBack: near

	.dbg	func, "PushBack", "00", static, "_PushBack"

.segment	"CODE"

;
; asm ("ldx %v+1", C);
;
	.dbg	line, "_scanf.c", 180
	ldx     _C+1
;
; asm ("bne %g", Done);
;
	.dbg	line, "_scanf.c", 181
	bne     L0055
;
; asm ("lda %v", C);
;
	.dbg	line, "_scanf.c", 182
	lda     _C
;
; asm ("jsr pushax");
;
	.dbg	line, "_scanf.c", 185
	jsr     pusha0
;
; (const struct scanfdata*) __AX__ = D_;
;
	.dbg	line, "_scanf.c", 188
	lda     _D_
;
; asm ("sta ptr1");
;
	.dbg	line, "_scanf.c", 189
	sta     ptr1
;
; (const struct scanfdata*) __AX__ = D_;
;
	.dbg	line, "_scanf.c", 188
	lda     _D_+1
;
; asm ("stx ptr1+1");
;
	.dbg	line, "_scanf.c", 190
	sta     ptr1+1
;
; asm ("ldy #%b", offsetof (struct scanfdata, unget));
;
	.dbg	line, "_scanf.c", 193
	ldy     #$02
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 194
	lda     (ptr1),y
;
; asm ("sta jmpvec+1");
;
	.dbg	line, "_scanf.c", 195
	sta     jmpvec+1
;
; asm ("iny");
;
	.dbg	line, "_scanf.c", 196
	iny
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 197
	lda     (ptr1),y
;
; asm ("sta jmpvec+2");
;
	.dbg	line, "_scanf.c", 198
	sta     jmpvec+2
;
; asm ("ldy #%b", offsetof (struct scanfdata, data) + 1);
;
	.dbg	line, "_scanf.c", 201
	ldy     #$05
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 202
	lda     (ptr1),y
;
; asm ("tax");
;
	.dbg	line, "_scanf.c", 203
	tax
;
; asm ("dey");
;
	.dbg	line, "_scanf.c", 204
	dey
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 205
	lda     (ptr1),y
;
; asm ("jsr jmpvec");
;
	.dbg	line, "_scanf.c", 208
	jsr     jmpvec
;
; asm ("lda %v", CharCount);
;
	.dbg	line, "_scanf.c", 211
	lda     _CharCount
;
; asm ("bne %g", Yank);
;
	.dbg	line, "_scanf.c", 212
	bne     L0082
;
; asm ("dec %v+1", CharCount);
;
	.dbg	line, "_scanf.c", 213
	dec     _CharCount+1
;
; asm ("dec %v", CharCount);
;
	.dbg	line, "_scanf.c", 215
L0082:	dec     _CharCount
;
; }
;
	.dbg	line, "_scanf.c", 219
L0055:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ ReadChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadChar: near

	.dbg	func, "ReadChar", "00", static, "_ReadChar"

.segment	"CODE"

;
; asm ("lda %v", D_);
;
	.dbg	line, "_scanf.c", 227
	lda     _D_
;
; asm ("sta ptr1");
;
	.dbg	line, "_scanf.c", 229
	sta     ptr1
;
; asm ("ldx %v+1", D_);
;
	.dbg	line, "_scanf.c", 228
	lda     _D_+1
;
; asm ("stx ptr1+1");
;
	.dbg	line, "_scanf.c", 230
	sta     ptr1+1
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 234
	lda     (ptr1)
;
; asm ("sta jmpvec+1");
;
	.dbg	line, "_scanf.c", 235
	sta     jmpvec+1
;
; asm ("iny");
;
	.dbg	line, "_scanf.c", 236
	ldy     #$01
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 237
	lda     (ptr1),y
;
; asm ("sta jmpvec+2");
;
	.dbg	line, "_scanf.c", 238
	sta     jmpvec+2
;
; asm ("ldy #%b", offsetof (struct scanfdata, data) + 1);
;
	.dbg	line, "_scanf.c", 241
	ldy     #$05
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 242
	lda     (ptr1),y
;
; asm ("tax");
;
	.dbg	line, "_scanf.c", 243
	tax
;
; asm ("dey");
;
	.dbg	line, "_scanf.c", 244
	dey
;
; asm ("lda (ptr1),y");
;
	.dbg	line, "_scanf.c", 245
	lda     (ptr1),y
;
; asm ("jsr jmpvec");
;
	.dbg	line, "_scanf.c", 248
	jsr     jmpvec
;
; asm ("sta %v", C);
;
	.dbg	line, "_scanf.c", 251
	sta     _C
;
; asm ("stx %v+1", C);
;
	.dbg	line, "_scanf.c", 252
	stx     _C+1
;
; asm ("inx");
;
	.dbg	line, "_scanf.c", 257
	inx
;
; asm ("beq %g", Done);
;
	.dbg	line, "_scanf.c", 258
	beq     L00B6
;
; asm ("inc %v", CharCount);
;
	.dbg	line, "_scanf.c", 261
	inc     _CharCount
;
; asm ("bne %g", Done);
;
	.dbg	line, "_scanf.c", 262
	bne     L00B6
;
; asm ("inc %v+1", CharCount);
;
	.dbg	line, "_scanf.c", 263
	inc     _CharCount+1
;
; }
;
	.dbg	line, "_scanf.c", 267
L00B6:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ Error (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Error: near

	.dbg	func, "Error", "00", static, "_Error"
	.dbg	sym, "$anon-param-0002", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 275
	jsr     pusha
;
; asm ("pha");
;
	.dbg	line, "_scanf.c", 276
	pha
;
; (char*) __AX__ = JumpBuf;
;
	.dbg	line, "_scanf.c", 277
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
;
; asm ("jsr pushax");
;
	.dbg	line, "_scanf.c", 278
	jsr     pushax
;
; asm ("pla");
;
	.dbg	line, "_scanf.c", 279
	pla
;
; asm ("ldx #>0");
;
	.dbg	line, "_scanf.c", 280
	ldx     #>0
;
; asm ("jmp %v", longjmp);
;
	.dbg	line, "_scanf.c", 281
	jmp     _longjmp
;
; }
;
	.dbg	line, "_scanf.c", 282
	jsr     incsp1
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ CheckEnd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckEnd: near

	.dbg	func, "CheckEnd", "00", static, "_CheckEnd"

.segment	"CODE"

;
; asm ("ldx %v+1", C);
;
	.dbg	line, "_scanf.c", 292
	ldx     _C+1
;
; asm ("beq %g", Done);
;
	.dbg	line, "_scanf.c", 293
	beq     L00D1
;
; Error (RC_EOF);
;
	.dbg	line, "_scanf.c", 295
	lda     #$02
	jmp     _Error
;
; }
;
	.dbg	line, "_scanf.c", 298
L00D1:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ SkipWhite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SkipWhite: near

	.dbg	func, "SkipWhite", "00", static, "_SkipWhite"

.segment	"CODE"

;
; while ((bool) isspace (C)) {
;
	.dbg	line, "_scanf.c", 305
	bra     L00D7
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 306
L00D5:	jsr     _ReadChar
;
; while ((bool) isspace (C)) {
;
	.dbg	line, "_scanf.c", 305
L00D7:	lda     _C
	ldx     _C+1
	jsr     _isspace
	tax
	bne     L00D5
;
; }
;
	.dbg	line, "_scanf.c", 308
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ ReadSign (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadSign: near

	.dbg	func, "ReadSign", "00", static, "_ReadSign"

.segment	"CODE"

;
; asm ("lda %v", C);
;
	.dbg	line, "_scanf.c", 322
	lda     _C
;
; asm ("cmp #'-'");
;
	.dbg	line, "_scanf.c", 323
	cmp     #'-'
;
; asm ("bne %g", NotNeg);
;
	.dbg	line, "_scanf.c", 324
	bne     L00E3
;
; asm ("sta %v", Converted);
;
	.dbg	line, "_scanf.c", 327
	sta     _Converted
;
; asm ("jsr %v", ReadChar);
;
	.dbg	line, "_scanf.c", 328
	jsr     _ReadChar
;
; asm ("lda #$00");           /* Flag as negative */
;
	.dbg	line, "_scanf.c", 329
	lda     #$00
;
; asm ("beq %g", Store);
;
	.dbg	line, "_scanf.c", 330
	beq     L00EC
;
; asm ("cmp #'+'");
;
	.dbg	line, "_scanf.c", 334
L00E3:	cmp     #'+'
;
; asm ("bne %g", Pos);
;
	.dbg	line, "_scanf.c", 335
	bne     L00F1
;
; asm ("sta %v", Converted);
;
	.dbg	line, "_scanf.c", 336
	sta     _Converted
;
; asm ("jsr %v", ReadChar);   /* Skip the + sign */
;
	.dbg	line, "_scanf.c", 337
	jsr     _ReadChar
;
; asm ("lda #$01");           /* Flag as positive */
;
	.dbg	line, "_scanf.c", 339
L00F1:	lda     #$01
;
; asm ("sta %v", Positive);
;
	.dbg	line, "_scanf.c", 341
L00EC:	sta     _Positive
;
; }
;
	.dbg	line, "_scanf.c", 342
	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ HexVal (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HexVal: near

	.dbg	func, "HexVal", "00", static, "_HexVal"
	.dbg	sym, "C", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 350
	jsr     pusha
;
; return (bool) isdigit (C) ?
;
	.dbg	line, "_scanf.c", 351
	lda     (sp)
	tay
	lda     __ctype,y
	and     #$04
;
; C - '0' :
;
	.dbg	line, "_scanf.c", 352
	beq     L0108
	ldx     #$00
	lda     (sp)
	sec
	sbc     #$30
	bcs     L00FB
	dex
;
; (char) tolower ((int) C) - ('a' - 10);
;
	.dbg	line, "_scanf.c", 353
	jmp     incsp1
L0108:	lda     (sp)
	ldx     #$00
	jsr     _tolower
	sec
	sbc     #$57
	bcs     L00FB
	dex
;
; }
;
	.dbg	line, "_scanf.c", 354
L00FB:	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ReadInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadInt: near

	.dbg	func, "ReadInt", "00", static, "_ReadInt"
	.dbg	sym, "Base", "00", auto, 0

.segment	"BSS"

L0111:
	.res	1,$00
L0112:
	.res	1,$00

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 360
	jsr     pusha
;
; unsigned char Val, CharCount = 0;
;
	.dbg	line, "_scanf.c", 361
	stz     L0112
;
; IntVal = 0L;
;
	.dbg	line, "_scanf.c", 364
	stz     _IntVal
	stz     _IntVal+1
	stz     _IntVal+2
	stz     _IntVal+3
;
; while ((bool) isxdigit (C) && ++Width != 0
;
	.dbg	line, "_scanf.c", 365
	bra     L0118
;
; ++CharCount;
;
	.dbg	line, "_scanf.c", 367
L0340:	inc     L0112
;
; IntVal = IntVal * (long) Base + (long) Val;
;
	.dbg	line, "_scanf.c", 368
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     pusheax
	ldy     #$04
	lda     (sp),y
	ldx     #$00
	jsr     tosmul0ax
	jsr     pusheax
	lda     L0111
	ldx     #$00
	jsr     tosadd0ax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 369
	jsr     _ReadChar
;
; while ((bool) isxdigit (C) && ++Width != 0
;
	.dbg	line, "_scanf.c", 365
L0118:	lda     _C
	ldx     _C+1
	jsr     _isxdigit
	tax
	beq     L0343
	inc     _Width
	bne     L011C
	inc     _Width+1
L011C:	lda     _Width
	ora     _Width+1
;
; && (Val = HexVal ((char) C)) < Base) {
;
	.dbg	line, "_scanf.c", 366
	beq     L0343
	lda     _C
	jsr     _HexVal
	sta     L0111
	cmp     (sp)
	txa
	sbc     #$00
	bcc     L0340
;
; if (CharCount == 0) {
;
	.dbg	line, "_scanf.c", 373
L0343:	lda     L0112
	bne     L0344
;
; Error (RC_NOCONV);
;
	.dbg	line, "_scanf.c", 374
	ina
	jsr     _Error
;
; Converted = true;
;
	.dbg	line, "_scanf.c", 378
L0344:	lda     #$01
	sta     _Converted
;
; }
;
	.dbg	line, "_scanf.c", 379
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ AssignInt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AssignInt: near

	.dbg	func, "AssignInt", "00", static, "_AssignInt"

.segment	"CODE"

;
; if (NoAssign == false) {
;
	.dbg	line, "_scanf.c", 391
	lda     _NoAssign
	bne     L014A
;
; (void*) __AX__ = va_arg (ap, void*);
;
	.dbg	line, "_scanf.c", 394
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0136
	dec     _ap+1
L0136:	ldx     _ap+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
;
; asm ("sta ptr1");
;
	.dbg	line, "_scanf.c", 397
	sta     ptr1
;
; asm ("stx ptr1+1");
;
	.dbg	line, "_scanf.c", 398
	stx     ptr1+1
;
; asm ("ldy %v", IntBytes);
;
	.dbg	line, "_scanf.c", 401
	ldy     _IntBytes
;
; Loop:   asm ("lda %v,y", IntVal);
;
	.dbg	line, "_scanf.c", 404
L013D:	lda     _IntVal,y
;
; asm ("sta (ptr1),y");
;
	.dbg	line, "_scanf.c", 405
	sta     (ptr1),y
;
; asm ("dey");
;
	.dbg	line, "_scanf.c", 406
	dey
;
; asm ("bpl %g", Loop);
;
	.dbg	line, "_scanf.c", 407
	bpl     L013D
;
; asm ("inc %v", Assignments);
;
	.dbg	line, "_scanf.c", 410
	inc     _Assignments
;
; asm ("bne %g", Done);
;
	.dbg	line, "_scanf.c", 411
	bne     L014A
;
; asm ("inc %v+1", Assignments);
;
	.dbg	line, "_scanf.c", 412
	inc     _Assignments+1
;
; }
;
	.dbg	line, "_scanf.c", 415
L014A:	rts
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ScanInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ScanInt: near

	.dbg	func, "ScanInt", "00", static, "_ScanInt"
	.dbg	sym, "Base", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "_scanf.c", 423
	jsr     pusha
;
; SkipWhite ();
;
	.dbg	line, "_scanf.c", 425
	jsr     _SkipWhite
;
; ReadSign ();
;
	.dbg	line, "_scanf.c", 428
	jsr     _ReadSign
;
; if (Base == 0) {
;
	.dbg	line, "_scanf.c", 431
	lda     (sp)
	bne     L0348
;
; if (CHAR (C) == '0') {
;
	.dbg	line, "_scanf.c", 432
	lda     _C
	cmp     #$30
	bne     L0347
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 433
	jsr     _ReadChar
;
; switch (CHAR (C)) {
;
	.dbg	line, "_scanf.c", 434
	lda     _C
;
; }
;
	.dbg	line, "_scanf.c", 449
	cmp     #$58
	beq     L0345
	cmp     #$78
	bne     L0346
;
; Base = 16;
;
	.dbg	line, "_scanf.c", 437
L0345:	lda     #$10
	sta     (sp)
;
; Converted = true;
;
	.dbg	line, "_scanf.c", 438
	lda     #$01
	sta     _Converted
;
; ReadChar ();
;
	.dbg	line, "_scanf.c", 439
	jsr     _ReadChar
;
; break;
;
	.dbg	line, "_scanf.c", 440
	bra     L0348
;
; Base = 8;
;
	.dbg	line, "_scanf.c", 442
L0346:	lda     #$08
	sta     (sp)
;
; PushBack ();
;
	.dbg	line, "_scanf.c", 447
	jsr     _PushBack
;
; C = '0';
;
	.dbg	line, "_scanf.c", 448
	lda     #$30
	sta     _C
	stz     _C+1
;
; }
;
	.dbg	line, "_scanf.c", 449
	bra     L0348
;
; Base = 10;
;
	.dbg	line, "_scanf.c", 451
L0347:	lda     #$0A
	sta     (sp)
;
; ReadInt (Base);
;
	.dbg	line, "_scanf.c", 456
L0348:	lda     (sp)
	jsr     _ReadInt
;
; if (Positive == false) {
;
	.dbg	line, "_scanf.c", 459
	lda     _Positive
	bne     L0172
;
; IntVal = -IntVal;
;
	.dbg	line, "_scanf.c", 460
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     negeax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
;
; AssignInt ();
;
	.dbg	line, "_scanf.c", 464
L0172:	jsr     _AssignInt
;
; }
;
	.dbg	line, "_scanf.c", 465
	jmp     incsp1
	.dbg	line

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetFormat (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetFormat: near

	.dbg	func, "GetFormat", "00", static, "_GetFormat"

.segment	"CODE"

;
; (const char*) __AX__ = format;
;
	.dbg	line, "_scanf.c", 473
	lda     _format
;
; asm ("sta regsave");
;
	.dbg	line, "_scanf.c", 474
	sta     regsave
;
; (const char*) __AX__ = format;
;
	.dbg	line, "_scanf.c", 473
	lda     _format+1
;
; asm ("stx regsave+1");
;
	.dbg	line, "_scanf.c", 475
	sta     regsave+1
;
; ++format;
;
	.dbg	line, "_scanf.c", 476
	inc     _format
	bne     L017F
	inc     _format+1
;
; asm ("lda (regsave),y");
;
	.dbg	line, "_scanf.c", 478
L017F:	lda     (regsave)
;
; asm ("ldx #>0");
;
	.dbg	line, "_scanf.c", 479
	ldx     #>0
;
; return (F = (char) __AX__);
;
	.dbg	line, "_scanf.c", 480
	sta     _F
;
; }
;
	.dbg	line, "_scanf.c", 481
	rts
	.dbg	line

.endproc

